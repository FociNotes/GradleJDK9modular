repositories {
    jcenter()
}

apply plugin: 'idea'

ext.GradleMajorVersion = "$gradle.gradleVersion".charAt(0)
println "Running gradle version: $gradle.gradleVersion"
println "Running gradle major version: $GradleMajorVersion"


// Workaround to compile using dependencies in automatic modules in Gradle -
// put their jars into 'lib' sub-directory and add it to the Gardle's module-path
// (IDEA compiles them without such tricks)
String modulePath = rootProject.file('lib').path

task genModulePath {
    println("getModulePath")
    subprojects {
        // Java classes are besides in the directoires:
        // before Gradle 4.0: ${project.buildDir}/classes/${sourceSet.name}
        //                    ${project.buildDir}/classes/main
        // since  Gradle 4.0: ${project.buildDir}/classes/${sourceDirectorySet.name}/${sourceSet.name}
        //                    ${project.buildDir}/classes/java/main

        if (GradleMajorVersion == '4') {
            modulePath += ":${project.buildDir}/classes/java/main"
        }
        else {
            modulePath += ":${project.buildDir}/classes/main"
        }
    }
    println("ModulePath=${modulePath}")
}

subprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9


    dependencies {
        // JUnit

        // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
        // JUnit Jupiter API for writing tests and extensions
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.0-M4'

        // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
        // JUnit Jupiter test engine implementation, only required at runtime
        testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0-M4'

        // https://mvnrepository.com/artifact/org.junit/junit-launcher
        // Public API for configuring and launching test plans - typically used by IDEs and build tools
        testCompile group: 'org.junit', name: 'junit-launcher', version: '5.0.0-ALPHA'

        // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-runner
        // Runner for executing tests and test suites on the JUnit Platform in a JUnit 4 environment
        testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.0.0-M4'

        //testCompile 'junit:junit:4.12'
    }

    if (plugins.hasPlugin('java')) {
        compileJava.dependsOn(genModulePath)
    }

    compileJava {
        doFirst {
            println(":${project.name} compileJava.doFirst")

            options.compilerArgs += ['--module-path', modulePath]
        }

        doLast {
            println(":${project.name} compileJava.doLast")
        }
    }

    tasks.withType(JavaCompile) {
        println(":${project.name} JavaCompile")

//        options.compilerArgs += ['--module-path', modulePath]
    }

}

task wrapper(type: Wrapper) {
    if (GradleMajorVersion == '4') {
        gradleVersion = '4.0-20170506235917+0000' // or execute './gradlew wrapper --gradle-version=4.0-20170506235917+0000'
    }
    else {
        gradleVersion = '3.5'
    }
}
