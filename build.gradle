repositories {
    jcenter()
}

println()
println "Running gradle version: $gradle.gradleVersion"
println "Running JDK:            ${System.getProperty('java.version')} (${System.getProperty('java.vendor')} ${System.getProperty('java.vm.version')})"
                                 // '9-ea (Oracle Corporation 9-ea+166'
                                 // '1.8.0_102 (Oracle Corporation 25.102-b14)'
println "OS:                     " + System.getProperty('os.name') + " / " + System.getProperty('os.arch') + " / " + System.getProperty('os.version')
                                 // Linux / amd64 / 4.9.0-3-amd64
println()


String modulePath

// Add to modulePath subprojects' classes paths
task genModulePath {
    println("genModulePath")

    StringJoiner joiner = new StringJoiner(":");

    // Workaround to compile using dependencies in automatic modules in Gradle -
    // put their jars into 'lib' sub-directory and add it to the Gardle's module-path
    // (IDEA compiles them without such tricks)
    //
    joiner.add(rootProject.file('lib').path);

    subprojects { proj ->
        apply plugin: 'java'
        sourceSets {
            main { sourceSetsMain ->
                sourceSetsMain.getOutput().getClassesDirs().each {
                    joiner.add(it.path)
                    }
            }
        }
    }

    modulePath = joiner.toString()

    println("ModulePath=${modulePath}")
    println()
}


String sourcePath

// Add to sourcePath subprojects' sources paths
task genSourcePath {
    println("genSourcePath")

    StringJoiner joiner = new StringJoiner(":");

    joiner.add(rootProject.file('lib/src').path);

    String srcMain
    subprojects { proj ->
        apply plugin: 'java'
        sourceSets {
            main { sourceSetsMain ->
                sourceSetsMain.getJava().getSrcDirs().each {
                    // Remove the "/java" tail from the string
                    srcMain = it.path
                    srcMain = (srcMain.endsWith("/java")) ? srcMain.substring(0, srcMain.lastIndexOf("/java")) : srcMain;

                    joiner.add(srcMain)
                }
            }
        }
    }

    sourcePath = joiner.toString()

    println("sourcePath=${sourcePath}")
    println()
}


// Do not generate Idea files by execute 'gradle idea' - it may generates old-format files.
// Just import the project in Idea instead.
allprojects {
    apply plugin: 'idea'

    println(":${project.name}: set Idea module properties")
    idea {
        module {
            inheritOutputDirs = true // Compile into root_project_dir/out/ directory


            //inheritOutputDirs = false // Compile into project_dir/build/

            //outputDir = file("$buildDir/classes/main/")
            //testOutputDir = file("$buildDir/classes/test")
        }
    }
    println()
}


subprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9


    dependencies {
        // JUnit

        // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
        // JUnit Jupiter API for writing tests and extensions
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.0-M4'

        // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
        // JUnit Jupiter test engine implementation, only required at runtime
        testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0-M4'

        // https://mvnrepository.com/artifact/org.junit/junit-launcher
        // Public API for configuring and launching test plans - typically used by IDEs and build tools
        testCompile group: 'org.junit', name: 'junit-launcher', version: '5.0.0-ALPHA'

        // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-runner
        // Runner for executing tests and test suites on the JUnit Platform in a JUnit 4 environment
        testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.0.0-M4'

        //testCompile 'junit:junit:4.12'
    }

    if (plugins.hasPlugin('java')) {
        compileJava.dependsOn(genModulePath)
    }

    compileJava {
        doFirst {
            println(":${project.name} compileJava.doFirst")

            options.compilerArgs += ['--module-path', modulePath]

            options.compilerArgs += ['--source-path', sourcePath]
        }

        doLast {
            println(":${project.name} compileJava.doLast")
        }
    }

    tasks.withType(JavaCompile) {
        println(":${project.name} JavaCompile")

        // options.compilerArgs += ['--module-path', modulePath]

        // options.compilerArgs += ['--source-path', sourcePath]
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
    //gradleVersion = '4.1-20170509165601+0000' // or execute './gradlew wrapper --gradle-version=4.1-20170509165601+0000'
}
